package specialproblem;
import java.util.*;

/** 
 * ABC implementation to the ambulance routing problem with time windows
 * @author Gaezel Dorato
 */
public class ABC {
	Map map;
	int colonySize;
	int limit;
	int maxCycle;
	double prevTime;
	float rate;
	FoodSource globalBest;
        ArrayList<String> routes;
	ArrayList<FoodSource> foodSources;

	/**
	 * Class constructor
         * @param aMap
         */
	ABC (Map aMap) {
		map = aMap;
		colonySize = 140; 
		limit = 210;    
		rate = 0;
		maxCycle = 10;   
		prevTime = 0;
		globalBest = null;
                routes = new ArrayList<>();
		foodSources = new ArrayList<>();
	}
        
	/**
	 * search shortest route for patients
         * 
         * @return String output results of search
         */  
	public String abcSearch() {
            String output = "";
            map.initDepots();
		final long startTime = System.currentTimeMillis();
                
		int size = map.getPatients().size();
		for(int i = 0; i < size; i++) {
			Patient person = map.getPatient(i);
			init();
			map.updateTime(Math.round((person.getStartTime() - prevTime)/60000));
			prevTime = person.getStartTime();
			output += abcAlgo(person.getId(),i);
		}
		final long endTime = System.currentTimeMillis();
                output += "\nTotal execution time: " + (endTime - startTime) + " ms" + "\nSuccess rate: " + getRate();
               
                return output;
	}

        /**
         * ABC algorithm: send bees and output result
         * 
         * @param patientId    patient Vertex ID
         * @param index        index of Patient 
         * @return String      output of search algorithm
         */
        public String abcAlgo(int patientId,int index) {
		initial(patientId);
		for(int i = 1; i <= maxCycle; i++) {
			sendEmployedBees();
			sendOnlookerBees();
			sendScoutBees(patientId);	
		}
                String output = "";
		if(globalBest == null) {
                        output += "No solution found";
                        output += map.getPatient(index).checkIn(-1);
		} else {
                    output += "\n\nAmbulance Response Time: " + String.format("%.02f", globalBest.getTime()) + "mins\nDistance: " + String.format("%.02f",globalBest.getDistance()) + " km";
                    output += map.getPatient(index).checkIn(globalBest.getTime()); 
                    output += "\nRoute: " + globalBest.getPathStr();
                    routes.add(globalBest.getPathStr());
	
                    map.getPatient(index).checkIn(globalBest.getTime());
                    map.getDepot(globalBest.getCurrent().getId()).addSched(globalBest.getTime() + globalBest.getDistanceTime());
		    
		}
                return output;
	}
        
       /**
        * gets success rate of the search for patient transfers
        * 
        * @return double success rate
        */
        public double getRate() {
                for(Patient p:map.getPatients()) {
                        if(p.isSaved()) {
                            rate++;
                        }
                }
                return rate/map.getPatients().size();
            }

       /**
        * gets found route solutions
        * 
        * @return ArrayList String representations of routes taken
        */
        public ArrayList<String> getRoute() {
                return routes;
            }

        /**
         * gets best ambulance response time
         * 
         * @return double ambulance response time
         */
        public double getAbcTime() {
                return globalBest.getTime();
            }

        /**
         * set best and Food Sources to default
         */
        public void init() {
            globalBest = null;
            foodSources = new ArrayList<>();
        }


       /**
        * generate initial food sources
        * 
        * @param custId patient ID
        */
	public void initial(int custId) {
            int size = colonySize/2;
            for(int i = 0; i < size; i++) {
                Bee bee = new Bee(map.getVertex(custId));
                bee = search(bee);
                foodSources.add(bee.getFood());
            }
	}


       /**
        * search for food source
        * 
        * @param aBee  bee that searches for food source
        * @return Bee  bee with or without food source found 
        */
	public Bee search(Bee aBee) {
            Bee bee = aBee;
            Vertex path = bee.getCurrent();
            while(!path.isDepot()) {
                    path = getNextPath(bee);
                    if(path == null) {
                            return bee;
                    } else {
                            bee.addVisited(path);
                    }
            }
            bee.addTime(map.getDepot(bee.getCurrent().getId()).getTime());
            memorizeBest(bee.getFood());
            return bee;
	}
        
       /**
        * search for new food source by optimizing initial food source
        * 
        * @param solution   food source to be optimized
        * @param index      random index to be inserted with new Vertex path
        * @param newBee     bee that would search new food source solution 
        * @return Bee       
        */
        public Bee mutantSearch(FoodSource solution, int index, Bee newBee) {
            Bee bee = newBee;
            Vertex v = solution.getPath().get(index);
	    Vertex current = bee.getCurrent();
           
            ArrayList<Edge> edges = current.getEdges();
            ArrayList<Edge> candidates = new ArrayList<>();
            FoodSource newBeePath = bee.getFood();
            for(Edge e:edges) {
                if(!newBeePath.isVisited(e.getNext()) && e.getNext().getId() != v.getId()) {
                        candidates.add(e);
                }
            }
            if(candidates.isEmpty()) {
                    return bee;
            }
            int i = randomFormula(candidates.size());
            current = candidates.get(i).getNext();
            bee.addVisited(map.getVertex(current.getId()));
           
            return search(bee);
        }


       /**
        * employed bees goes to all available food sources and optimize its solution
        */
	public void sendEmployedBees() {
		for(int i = 0; i < foodSources.size(); i++) {
			makeMutant(i);
		}
	}

       /**
        * onlooker bees selects food source based on fitness optimize best solution
        */
        public void sendOnlookerBees() {
            calculateProbabilities();
            int count = 0;

            while(count < colonySize/2) {
                    count ++;
                    double r = Math.random();
                    for(int i = 0; i < foodSources.size(); i++) {
                            if(r <= foodSources.get(i).getProbability()) {
                                    makeMutant(i);
                                    i = foodSources.size();
                            }
                    }
            }
	}

       /**
        * scout bees check the trial counter of each food source and remove those that exceeds limit
        * 
        * @param patientId    patient vertex ID
        */
	public void sendScoutBees(int patientId) {
            for(int i = 0; i < foodSources.size(); i++) {
                if(foodSources.get(i).getTrialCount() >= limit) {
                    foodSources.remove(i);
                    Bee bee = new Bee(map.getVertex(patientId));
                    bee = search(bee);
                    if(bee.getFood().isSuccessful()) {
                        bee.addTime(map.getDepot(bee.getCurrent().getId()).getTime());
                        foodSources.add(bee.getFood());
                        memorizeBest(bee.getFood());

                    }
                }
            }
	}

       /** 
        * make an optimized mutant solution based on a foodsource add trial count if solution cannot be optimized 
        * 
        * @param index  food source index to be optimized
        */
	public void makeMutant(int index) {
		FoodSource solution = foodSources.get(index);
		ArrayList<Vertex> foodPath = solution.getPath();
		Bee bee = new Bee(foodPath.get(0));
		int retainPath = randomFormula(foodPath.size());
		for(int j = 1; j < retainPath; j++) {
			bee.addVisited(foodPath.get(j));
		}
		bee = mutantSearch(solution, retainPath, bee);
                  
                if(bee == null || (solution.isSuccessful() && bee.getFood().isSuccessful())) {
                    foodSources.get(index).addCount();
                } else if(bee.getFood().isSuccessful()) {
                    bee.addTime(map.getDepot(bee.getCurrent().getId()).getTime());
                    if(!solution.isSuccessful()) {
                       foodSources.remove(index);
                       foodSources.add(bee.getFood());
                       memorizeBest(bee.getFood());  
                    } else {
                        if(solution.getTime() > bee.getFood().getTime()) {
                             foodSources.remove(index);
                             foodSources.add(bee.getFood());
                             memorizeBest(bee.getFood());  
                        }
                    }
		} else if(!bee.getFood().isSuccessful() && !solution.isSuccessful()) {
                    if(solution.getTime() > bee.getFood().getTime()) {
                        foodSources.remove(index);
                        foodSources.add(bee.getFood());
                        memorizeBest(bee.getFood());   
                    }
                }
	}

       /**
        * gets next vertex to be visited
        *
        * @param bee       current bee searching for next path
        * @return Vertex   next vertex path to be visited
        */
	public Vertex getNextPath(Bee bee) {
		Vertex current = bee.getCurrent();
		ArrayList<Edge> edges = current.getEdges();
		ArrayList<Edge> candidates = new ArrayList<>();
		FoodSource path = bee.getFood();
		for(Edge e:edges) {
                    if(!path.isVisited(e.getNext())) {
                            candidates.add(e);
                    }
		}
		if(candidates.isEmpty()) {
			return null;
		}

		int index = randomFormula(candidates.size());
		current = candidates.get(index).getNext();
		return map.getVertex(current.getId());
	}
        
        /**
         * probabilities are calculated and set as intervals for selection
         */
	public void calculateProbabilities() {
		double sumFit = 0;
		for(FoodSource f: foodSources) {
			sumFit += f.getFitness(); 
		}
		double interval = 0;
		for(int i = 0; i < foodSources.size(); i++) {
			FoodSource f = foodSources.get(i);
			interval +=  f.getFitness()/sumFit;
			f.setProbability(interval);
		}
	}

        /**
         * memorize best food Source
         * 
         * @param food food source to be compared to the current best food source
         */
	public void memorizeBest(FoodSource food) {
            if(food.isSuccessful()) {
                if(globalBest == null || food.getTime() < globalBest.getTime()) {
                        globalBest = food;
                }
            }
	}

        /**
         * gets random number
         * 
         * @param size candidate list size
         * @return random number
         */
        public int randomFormula(int size) {
                if(size == 0) return -1;
		return (int) Math.round(Math.random()*(size-1));
	}
}
